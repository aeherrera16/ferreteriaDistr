using BCrypt.Net;

Console.WriteLine("??????????????????????????????????????????????????????????");
Console.WriteLine("?     Generador de Hashes BCrypt para PostgreSQL         ?");
Console.WriteLine("??????????????????????????????????????????????????????????");
Console.WriteLine();

// Contraseñas a hashear
var passwords = new Dictionary<string, string>
{
    { "admin", "Admin123!" },
    { "usuario", "Usuario123!" }
};

Console.WriteLine("Generando hashes...\n");

foreach (var (username, password) in passwords)
{
    string hash = BCrypt.Net.BCrypt.HashPassword(password);
    
    Console.WriteLine($"Usuario: {username}");
    Console.WriteLine($"Password: {password}");
    Console.WriteLine($"Hash BCrypt: {hash}");
    Console.WriteLine();
    
    // Verificar que el hash funciona
    bool isValid = BCrypt.Net.BCrypt.Verify(password, hash);
    Console.WriteLine($"? Verificación: {(isValid ? "OK" : "ERROR")}");
    Console.WriteLine(new string('?', 80));
    Console.WriteLine();
}

Console.WriteLine("??????????????????????????????????????????????????????????");
Console.WriteLine("?              Script SQL para PostgreSQL                ?");
Console.WriteLine("??????????????????????????????????????????????????????????");
Console.WriteLine();

foreach (var (username, password) in passwords)
{
    string hash = BCrypt.Net.BCrypt.HashPassword(password);
    Console.WriteLine($"UPDATE usuarios SET passwordhash = '{hash}' WHERE nombreusuario = '{username}';");
}

Console.WriteLine();
Console.WriteLine("Presiona cualquier tecla para salir...");
Console.ReadKey();
