@using InventarioFerreteria.Web.Services
@inject InventarioSoapClient SoapClient

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-success" @onclick="MostrarFormularioNuevo">
            ‚ûï Nuevo Proveedor
        </button>
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">@(proveedorEditando == null ? "‚ûï Nuevo Proveedor" : "‚úèÔ∏è Editar Proveedor")</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@formulario" OnValidSubmit="GuardarProveedor">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">Nombre *</label>
                    <InputText @bind-Value="formulario.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => formulario.Nombre)" />
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Tel√©fono</label>
                        <InputText @bind-Value="formulario.Telefono" class="form-control" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Email</label>
                        <InputText @bind-Value="formulario.Email" type="email" class="form-control" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Direcci√≥n</label>
                    <InputTextArea @bind-Value="formulario.Direccion" class="form-control" rows="2" />
                </div>

                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <div class="alert alert-danger">‚ùå @mensajeError</div>
                }

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@guardando">
                        @if (guardando)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        üíæ Guardar
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelarFormulario">
                        ‚ùå Cancelar
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (cargando)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-2">Cargando proveedores...</p>
    </div>
}
else if (proveedores.Count == 0)
{
    <div class="alert alert-info">
        ‚ÑπÔ∏è No hay proveedores registrados. Haga clic en "Nuevo Proveedor" para agregar uno.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Tel√©fono</th>
                    <th>Email</th>
                    <th>Direcci√≥n</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var proveedor in proveedores)
                {
                    <tr>
                        <td><strong>@proveedor.Id</strong></td>
                        <td>üöö @proveedor.Nombre</td>
                        <td>@(string.IsNullOrEmpty(proveedor.Telefono) ? "N/A" : proveedor.Telefono)</td>
                        <td>@(string.IsNullOrEmpty(proveedor.Email) ? "N/A" : proveedor.Email)</td>
                        <td>@(string.IsNullOrEmpty(proveedor.Direccion) ? "N/A" : proveedor.Direccion)</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" @onclick="@(() => EditarProveedor(proveedor))"
                                        title="Editar">
                                    ‚úèÔ∏è
                                </button>
                                <button class="btn btn-outline-danger" @onclick="@(() => EliminarProveedor(proveedor.Id))"
                                        title="Eliminar">
                                    üóëÔ∏è
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="alert alert-info mt-3">
        üìä Total de proveedores: <strong>@proveedores.Count</strong>
    </div>
    @if (!string.IsNullOrEmpty(mensajeError) && !mostrarFormulario)
{
    <div class="alert alert-danger mt-3">
        ‚ùå @mensajeError
        <button type="button" class="btn-close" @onclick="@(() => mensajeError = string.Empty)"></button>
    </div>
}
}

@code {
    private List<ProveedorDto> proveedores = new();
    private bool cargando = true;
    private bool mostrarFormulario = false;
    private bool guardando = false;
    private string mensajeError = string.Empty;
    private ProveedorDto? proveedorEditando = null;
    private ProveedorFormulario formulario = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        cargando = true;
        try
        {
            var resultado = await SoapClient.ObtenerTodosProveedoresAsync();
            if (resultado.Exito && resultado.Datos != null)
            {
                proveedores = resultado.Datos;
            }
        }
        finally
        {
            cargando = false;
        }
    }

    private void MostrarFormularioNuevo()
    {
        proveedorEditando = null;
        formulario = new ProveedorFormulario();
        mostrarFormulario = true;
        mensajeError = string.Empty;
    }

    private void EditarProveedor(ProveedorDto proveedor)
    {
        proveedorEditando = proveedor;
        formulario = new ProveedorFormulario
        {
            Nombre = proveedor.Nombre,
            Telefono = proveedor.Telefono,
            Email = proveedor.Email,
            Direccion = proveedor.Direccion
        };
        mostrarFormulario = true;
        mensajeError = string.Empty;
    }

    private async Task GuardarProveedor()
    {
        guardando = true;
        mensajeError = string.Empty;

        try
        {
            RespuestaDto<ProveedorDto> resultado;

            if (proveedorEditando == null)
            {
                resultado = await SoapClient.InsertarProveedorAsync(
                    formulario.Nombre, 
                    formulario.Telefono, 
                    formulario.Email, 
                    formulario.Direccion);
            }
            else
            {
                resultado = await SoapClient.ActualizarProveedorAsync(
                    proveedorEditando.Id,
                    formulario.Nombre, 
                    formulario.Telefono, 
                    formulario.Email, 
                    formulario.Direccion);
            }

            if (resultado.Exito)
            {
                mostrarFormulario = false;
                await CargarDatos();
            }
            else
            {
                mensajeError = resultado.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error: {ex.Message}";
        }
        finally
        {
            guardando = false;
        }
    }

    private void CancelarFormulario()
    {
        mostrarFormulario = false;
        proveedorEditando = null;
        mensajeError = string.Empty;
    }

    private async Task EliminarProveedor(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¬øEst√° seguro de eliminar este proveedor?"))
        {
            var resultado = await SoapClient.EliminarProveedorAsync(id);
            if (resultado.Exito)
            {
                await CargarDatos();
            }
            else
            {
                mensajeError = resultado.Mensaje;
            }
        }
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    public class ProveedorFormulario
    {
        [Required(ErrorMessage = "El nombre es requerido")]
        public string Nombre { get; set; } = string.Empty;
        public string? Telefono { get; set; }
        public string? Email { get; set; }
        public string? Direccion { get; set; }
    }
}