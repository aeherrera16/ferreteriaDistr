@using System.ComponentModel.DataAnnotations
@using InventarioFerreteria.Web.Services
@inject InventarioSoapClient SoapClient

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-success" @onclick="MostrarFormularioNuevo">
            ‚ûï Nuevo Art√≠culo
        </button>
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">@(articuloEditando == null ? "‚ûï Nuevo Art√≠culo" : "‚úèÔ∏è Editar Art√≠culo")</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@formulario" OnValidSubmit="GuardarArticulo">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">C√≥digo *</label>
                        <InputText @bind-Value="formulario.Codigo" class="form-control" />
                        <ValidationMessage For="@(() => formulario.Codigo)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Nombre *</label>
                        <InputText @bind-Value="formulario.Nombre" class="form-control" />
                        <ValidationMessage For="@(() => formulario.Nombre)" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Descripci√≥n</label>
                    <InputTextArea @bind-Value="formulario.Descripcion" class="form-control" rows="2" />
                </div>

                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Precio Compra *</label>
                        <InputNumber @bind-Value="formulario.PrecioCompra" class="form-control" step="0.01" />
                        <ValidationMessage For="@(() => formulario.PrecioCompra)" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Precio Venta *</label>
                        <InputNumber @bind-Value="formulario.PrecioVenta" class="form-control" step="0.01" />
                        <ValidationMessage For="@(() => formulario.PrecioVenta)" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Stock *</label>
                        <InputNumber @bind-Value="formulario.Stock" class="form-control" />
                        <ValidationMessage For="@(() => formulario.Stock)" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Stock M√≠nimo *</label>
                        <InputNumber @bind-Value="formulario.StockMinimo" class="form-control" />
                        <ValidationMessage For="@(() => formulario.StockMinimo)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Categor√≠a</label>
                        <InputSelect @bind-Value="formulario.CategoriaId" class="form-select">
                            <option value="">-- Seleccione --</option>
                            @foreach (var cat in categorias)
                            {
                                <option value="@cat.Id">@cat.Nombre</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Proveedor</label>
                        <InputSelect @bind-Value="formulario.ProveedorId" class="form-select">
                            <option value="">-- Seleccione --</option>
                            @foreach (var prov in proveedores)
                            {
                                <option value="@prov.Id">@prov.Nombre</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <div class="alert alert-danger">‚ùå @mensajeError</div>
                }

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@guardando">
                        @if (guardando)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        üíæ Guardar
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelarFormulario">
                        ‚ùå Cancelar
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (cargando)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-2">Cargando art√≠culos...</p>
    </div>
}
else if (articulos.Count == 0)
{
    <div class="alert alert-info">
        ‚ÑπÔ∏è No hay art√≠culos registrados. Haga clic en "Nuevo Art√≠culo" para agregar uno.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>C√≥digo</th>
                    <th>Nombre</th>
                    <th>Precio Compra</th>
                    <th>Precio Venta</th>
                    <th>Stock</th>
                    <th>Stock M√≠n</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var articulo in articulos)
                {
                    <tr class="@(articulo.RequiereReposicion ? "table-warning" : "")">
                        <td><strong>@articulo.Codigo</strong></td>
                        <td>@articulo.Nombre</td>
                        <td>$@articulo.PrecioCompra.ToString("N2")</td>
                        <td>$@articulo.PrecioVenta.ToString("N2")</td>
                        <td>
                            <span class="badge @(articulo.RequiereReposicion ? "bg-warning text-dark" : "bg-success")">
                                @articulo.Stock
                            </span>
                        </td>
                        <td>@articulo.StockMinimo</td>
                        <td>
                            @if (articulo.RequiereReposicion)
                            {
                                <span class="badge bg-warning text-dark">‚ö†Ô∏è Reponer</span>
                            }
                            else
                            {
                                <span class="badge bg-success">‚úÖ OK</span>
                            }
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" @onclick="@(() => EditarArticulo(articulo))"
                                        title="Editar">
                                    ‚úèÔ∏è
                                </button>
                                <button class="btn btn-outline-danger" @onclick="@(() => EliminarArticulo(articulo.Id))"
                                        title="Eliminar">
                                    üóëÔ∏è
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="alert alert-info mt-3">
        üìä Total de art√≠culos: <strong>@articulos.Count</strong>
    </div>
}

@code {
    private List<ArticuloDto> articulos = new();
    private List<CategoriaDto> categorias = new();
    private List<ProveedorDto> proveedores = new();
    private bool cargando = true;
    private bool mostrarFormulario = false;
    private bool guardando = false;
    private string mensajeError = string.Empty;
    private ArticuloDto? articuloEditando = null;
    private ArticuloInputDto formulario = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        cargando = true;
        try
        {
            var resultadoArticulos = await SoapClient.ObtenerTodosArticulosAsync();
            if (resultadoArticulos.Exito && resultadoArticulos.Datos != null)
            {
                articulos = resultadoArticulos.Datos;
            }

            var resultadoCategorias = await SoapClient.ObtenerTodasCategoriasAsync();
            if (resultadoCategorias.Exito && resultadoCategorias.Datos != null)
            {
                categorias = resultadoCategorias.Datos;
            }

            var resultadoProveedores = await SoapClient.ObtenerTodosProveedoresAsync();
            if (resultadoProveedores.Exito && resultadoProveedores.Datos != null)
            {
                proveedores = resultadoProveedores.Datos;
            }
        }
        finally
        {
            cargando = false;
        }
    }

    private void MostrarFormularioNuevo()
    {
        articuloEditando = null;
        formulario = new ArticuloInputDto();
        mostrarFormulario = true;
        mensajeError = string.Empty;
    }

    private void EditarArticulo(ArticuloDto articulo)
    {
        articuloEditando = articulo;
        formulario = new ArticuloInputDto
        {
            Codigo = articulo.Codigo,
            Nombre = articulo.Nombre,
            Descripcion = articulo.Descripcion,
            CategoriaId = articulo.CategoriaId,
            PrecioCompra = articulo.PrecioCompra,
            PrecioVenta = articulo.PrecioVenta,
            Stock = articulo.Stock,
            StockMinimo = articulo.StockMinimo,
            ProveedorId = articulo.ProveedorId
        };
        mostrarFormulario = true;
        mensajeError = string.Empty;
    }

    private async Task GuardarArticulo()
    {
        guardando = true;
        mensajeError = string.Empty;

        try
        {
            RespuestaDto<ArticuloDto> resultado;

            if (articuloEditando == null)
            {
                resultado = await SoapClient.InsertarArticuloAsync(formulario);
            }
            else
            {
                resultado = await SoapClient.ActualizarArticuloAsync(articuloEditando.Id, formulario);
            }

            if (resultado.Exito)
            {
                mostrarFormulario = false;
                await CargarDatos();
            }
            else
            {
                mensajeError = resultado.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error: {ex.Message}";
        }
        finally
        {
            guardando = false;
        }
    }

    private void CancelarFormulario()
    {
        mostrarFormulario = false;
        articuloEditando = null;
        mensajeError = string.Empty;
    }

    private async Task EliminarArticulo(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¬øEst√° seguro de eliminar este art√≠culo?"))
        {
            var resultado = await SoapClient.EliminarArticuloAsync(id);
            if (resultado.Exito)
            {
                await CargarDatos();
            }
        }
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
}